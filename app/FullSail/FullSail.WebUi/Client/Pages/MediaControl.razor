@page "/"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
i {
    touch-action: manipulation;
}
 
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background: #e5e5e5;
    border-radius: 30px;
    height: 750px;
    width: 500px;
    background-color: black;
}

div.menu-grid {
    display: grid;
    grid-template-columns: auto auto auto;
    border-bottom: 1px solid #c2c1c1;
    border-left: 1px solid #c2c1c1;
}

div.menu-grid>div {
    padding: 10px 35px;
    border-top: 1px solid #c2c1c1;
    border-right: 1px solid #c2c1c1;
}

.fa {
    color: orange;
}
span.label {
    font-size: 12px;
    color: #F7B548;
}

div.menu-grid>div>i {
    color: #F7B548;
    font-size: 2.5em;
    margin-bottom: 5px;
}

div.menu-grid>div>i.active {
    color: #d51600;
}

div.rounded-bg {
    background: #7BDDEF;
    border-radius: 50px;
}

div.grey-bg {
    background: #3E8EED;
    border-radius: 50%;
}

i.home-icon {
    font-size: 45px;
    color: #a1a1a1;
}

i.control-icon {
    font-size: 40px;
    color: #512BD4;
}

div.circle {
    border: 1px solid #c2c1c1;
    border-radius: 50%;
}

div.ok-inner {
    padding: 15px;
    background-color: #28C2D1;
}

div.ok-outer {
    padding: 100px;
    background-color: #7BDDEF;
}

i.right {
    transform: translate(70px);
}

i.bottom {
    transform: rotate(90deg) translate(70px);
}

i.left {
    transform: rotate(180deg) translate(70px);
}

i.top {
    transform: rotate(270deg) translate(70px);
}

.slidecontainer {
  width: 100%; /* Width of the outside container */
}

/* The slider itself */
.slider {
  -webkit-appearance: none;  /* Override default CSS styles */
  appearance: none;
  width: 100%; /* Full-width */
  height: 25px; /* Specified height */
  background: #d3d3d3; /* Grey background */
  outline: none; /* Remove outline */
  opacity: 0.7; /* Set transparency (for mouse-over effects on hover) */
  -webkit-transition: .2s; /* 0.2 seconds transition on hover */
  transition: opacity .2s;
}

/* Mouse-over effects */
.slider:hover {
  opacity: 1; /* Fully shown on mouse-over */
}

/* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */
.slider::-webkit-slider-thumb {
  -webkit-appearance: none; /* Override default look */
  appearance: none;
  width: 25px; /* Set a specific slider handle width */
  height: 25px; /* Slider handle height */
  background: #512BD4; /* Green background */
  cursor: pointer; /* Cursor on hover */
}

.slider::-moz-range-thumb {
  width: 25px; /* Set a specific slider handle width */
  height: 25px; /* Slider handle height */
  background: #512BD4; /* Green background */
  cursor: pointer; /* Cursor on hover */
}

#ip2 {
    border-radius: 25px;
    border: 2px solid #609;
    margin-top: 30px;
    padding: 20px; 
    width: 100%;
    height: 15px;    
}
</style>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Remote Control App | theuicode.com </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==" crossorigin="anonymous" />
    <link rel="stylesheet" href="style.css">
</head>

<body>
    <!--container-->
    <div class="container">
        <div style="margin-top: 25px;" class="d-flex flex-row justify-content-center">
            <div class="menu-grid">
                <div class="d-flex flex-column align-items-center" @onclick='() => InputCommand("escape")'>
                    <i class="fas fa-arrow-left"></i>
                </div>
                <div class="d-flex flex-column align-items-center" @onclick='() => InputCommand("reboot")'>
                    <i class="fas fa-power-off active"></i>
                </div>
                <div class="d-flex flex-column align-items-center" @onclick='() => InputCommand("osd")'>
                    <i class="fas fa-cog"></i>
                </div>
            </div>
        </div>

        <div class="d-flex flex-row mt-4 justify-content-between px-2">
            <div class="d-flex flex-column rounded-bg py-3 px-4 justify-content-center align-items-center">
                <i class="fas fa-chevron-up py-3 control-icon" @onclick='() => FastForward()'></i>
                <i class="fas control-icon fa-fast-forward"></i>
                <i class="fas fa-chevron-down py-3 control-icon" @onclick='() => Rewind()'></i>
            </div>
            <div class="d-flex flex-column align-items-center">
                <div class="d-flex flex-row grey-bg justify-content-center align-items-center">
                    <i style="color: #F7B548" class="fas fa-play-circle p-3 home-icon" @onclick='() => InputCommand("toggleplaypause")'></i>
                </div>
            </div>
            <div class="d-flex flex-column rounded-bg py-3 px-4 justify-content-center align-items-center">
                <i class="fas fa-plus py-3 control-icon" @onclick='() => VolumeUp()'></i>
                <i class="fas control-icon fa-volume-up"></i>
                <i class="fas fa-minus py-3 control-icon" @onclick='() => VolumeDown()'></i>
            </div>
        </div>

        <div class="mt-5 pt-4 position-relative d-flex flex-row justify-content-center align-items-center">
            <div class="circle ok-outer position-absolute" ></div>
            <div class="circle ok-inner position-absolute">
                <i style="font-size: 40px" class="fas fa-check" @onclick='() => InputCommand("enter")'></i>
            </div>
            <i style="font-size: 85px" class="fas fa-caret-right position-absolute control-icon right" @onclick='() => InputCommand("right")'></i>
            <i style="font-size: 85px" class="fas fa-caret-right position-absolute control-icon bottom" @onclick='() => InputCommand("down")'></i>
            <i style="font-size: 85px" class="fas fa-caret-right position-absolute control-icon left" @onclick='() => InputCommand("left")'></i>
            <i style="font-size: 85px" class="fas fa-caret-right position-absolute control-icon top" @onclick='() => InputCommand("up")'></i>
        </div>

        <div class="d-flex flex-row justify-content-between mt-5 pt-4 px-3">
            <div class="d-flex flex-row grey-bg">
                <i style="color: #F7B548" class="fas fa-ellipsis-h p-3 control-icon"></i>
            </div>
            <div class="d-flex flex-row grey-bg">
                <i style="color: #F7B548" class="fas fa-volume-mute p-3 control-icon" @onclick='() => InputCommand("mute")'></i>
            </div>
        </div>

        <br />
        <br />
        <input type="range" class="slider" min="0" max="100" id="myRange" @bind="sliderValue" @oninput="HandleSliderChange" />
        <br />
        <input 
            value="@InputValue"
            @onkeydown="@Enter"
            @oninput="(e)=> InputValue = e.Value?.ToString()"
            type="text" id="ip2"/>
    </div>
</body>

</html>
@code {
    private string? InputValue;
    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Http.PostAsync($"media/sendtext?text={InputValue}", new StringContent(""));
        }
        else
        {
            await Http.PostAsync($"media/sendtextchanged?text={InputValue}", new StringContent(""));
        }
    }
    private int sliderValue;
    private async Task HandleSliderChange(ChangeEventArgs e)
    {
        sliderValue = Convert.ToInt32(e.Value);
        var percentage = (int)((double)sliderValue / 100 * 100);
        await Http.PostAsync($"media/seek?percentage={percentage}", new StringContent(""));
    }
    private int currSpeed = 1;
    private readonly int MAX_FASTFORWARD_SPEED = 32;
    private readonly int MAX_REWIND_SPEED = -32;

    private int currVolume = 0;
    private readonly int MAX_VOLUME = 100;
    private readonly int MIN_VOLUME = 0;

    private async Task InputCommand(string endpoint)
    {
        await Http.PostAsync($"media/{endpoint}", new StringContent(""));
    }
    private async Task TogglePlayPause()
    {
        currSpeed = 1;
        await Http.PostAsync($"media/toggleplaypause", new StringContent(""));
    }
    private async Task Rewind()
    {
        await Http.PostAsync($"media/rewind?speed={DecSpeed()}", new StringContent(""));
    }
    private async Task FastForward()
    {
        await Http.PostAsync($"media/fastforward?speed={IncSpeed()}", new StringContent(""));
    }
    private async Task VolumeUp()
    {
        await Http.PostAsync($"media/volume?percentVolume={IncVolume()}", new StringContent(""));
    }
    private async Task VolumeDown()
    {
        await Http.PostAsync($"media/volume?percentVolume={DecVolume()}", new StringContent(""));
    }
    public int IncVolume()
    {
        if (currVolume >= MAX_VOLUME)
        {
            currVolume = MIN_VOLUME;
        }
        else 
        {
            currVolume += 10;
        }

        return currVolume;
    }
    public int DecVolume()
    {
        if (currVolume <= MIN_VOLUME)
        {
            currVolume = MIN_VOLUME;
        }
        else 
        {
            currVolume -= 10;
        }

        return currVolume ;
    }
    public int IncSpeed()
    {
        if (currSpeed <= 1)
        {
            currSpeed = 2;
        }
        else if (currSpeed != MAX_FASTFORWARD_SPEED)
        {
            currSpeed *= 2;
        }

        return currSpeed;
    }
    public int DecSpeed()
    {
        if (currSpeed >= 1)
        {
            currSpeed = -2;
        }
        else if (currSpeed != MAX_REWIND_SPEED)
        {
            currSpeed *= 2;
        }

        return currSpeed;
    }
    protected override async Task OnInitializedAsync()
    {
        var hostname = await localStorage.GetItemAsStringAsync("hostname");
        var port = await localStorage.GetItemAsync<int>("port");
        var username = await localStorage.GetItemAsStringAsync("username");
        var password = await localStorage.GetItemAsStringAsync("password");

        if(hostname != null && port != 0 && username != null && password != null)
        {
            hostname = hostname.Replace("\"", "");
            username = username.Replace("\"", "");
            password = password.Replace("\"", "");
            await Http.PostAsync($"media/kodisettings?hostname={hostname}&port={port}&username={username}&password={password}", new StringContent(""));
        }
        else
        {
            throw new Exception("No Kodi API settigns in local storage!");
        }
    }
}

