@page "/test"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>No double tap</title>
  <style>
    .no-double-tap {
      touch-action: manipulation;
    }
  </style>
</head>
<body>
    <div class="no-double-tap container">
        <div style="margin-top: 25px;" class="d-flex flex-row justify-content-center">
            <div class="menu-grid">
                <div class="d-flex flex-column align-items-center" @onclick='() => InputCommand("escape")'>
                    <i class="fas fa-arrow-left"></i>
                </div>
                <div class="d-flex flex-column align-items-center" @onclick='() => InputCommand("reboot")'>
                    <i class="fas fa-power-off active"></i>
                </div>
                <div class="d-flex flex-column align-items-center" @onclick='() => InputCommand("osd")'>
                    <i class="fas fa-cog"></i>
                </div>
            </div>
        </div>

        <div class="d-flex flex-row mt-4 justify-content-between px-2">
            <div class="d-flex flex-column rounded-bg py-3 px-4 justify-content-center align-items-center">
                <i class="fas fa-chevron-up py-3 control-icon" @onclick='() => FastForward()'></i>
                <i class="fas control-icon fa-fast-forward"></i>
                <i class="fas fa-chevron-down py-3 control-icon" @onclick='() => Rewind()'></i>
            </div>
            <div class="d-flex flex-column align-items-center">
                <div class="d-flex flex-row grey-bg justify-content-center align-items-center">
                    <i style="color: #F7B548" class="fas fa-play-circle p-3 home-icon" @onclick='() => InputCommand("toggleplaypause")'></i>
                </div>
            </div>
            <div class="d-flex flex-column rounded-bg py-3 px-4 justify-content-center align-items-center">
                <i class="fas fa-plus py-3 control-icon" @onclick='() => VolumeUp()'></i>
                <i class="fas control-icon fa-volume-up"></i>
                <i class="no-double-tap fas fa-minus py-3 control-icon" @onclick='() => VolumeDown()'></i>
            </div>
        </div>

        <div class="mt-5 pt-4 position-relative d-flex flex-row justify-content-center align-items-center">
            <div class="circle ok-outer position-absolute" ></div>
            <div class="circle ok-inner position-absolute">
                <i style="font-size: 40px" class="fas fa-check" @onclick='() => InputCommand("enter")'></i>
            </div>
            <i style="font-size: 85px" class="no-double-tap fas fa-caret-right position-absolute control-icon right" @onclick='() => InputCommand("right")'></i>
            <i style="font-size: 85px" class="no-double-tap fas fa-caret-right position-absolute control-icon bottom" @onclick='() => InputCommand("down")'></i>
            <i style="font-size: 85px" class="no-double-tap fas fa-caret-right position-absolute control-icon left" @onclick='() => InputCommand("left")'></i>
            <i style="font-size: 85px" class="no-double-tap fas fa-caret-right position-absolute control-icon top" @onclick='() => InputCommand("up")'></i>
        </div>

        <div class="d-flex flex-row justify-content-between mt-5 pt-4 px-3">
            <div class="d-flex flex-row grey-bg">
                <i style="color: #F7B548" class="fas fa-ellipsis-h p-3 control-icon"></i>
            </div>
            <div class="d-flex flex-row grey-bg">
                <i style="color: #F7B548" class="fas fa-volume-mute p-3 control-icon" @onclick='() => InputCommand("mute")'></i>
            </div>
        </div>

        <br />
        <br />
        <input type="range" class="slider" min="0" max="100" id="myRange" @bind="sliderValue" @oninput="HandleSliderChange" />
        <br />
        <input 
            value="@InputValue"
            @onkeydown="@Enter"
            @oninput="(e)=> InputValue = e.Value?.ToString()"
            type="text" id="ip2"/>
            <button>plain button</button>
    </div>
</body>
</html>

@code {
    private string? InputValue;
    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Http.PostAsync($"media/sendtext?text={InputValue}", new StringContent(""));
        }
        else
        {
            await Http.PostAsync($"media/sendtextchanged?text={InputValue}", new StringContent(""));
        }
    }
    private int sliderValue;
    private async Task HandleSliderChange(ChangeEventArgs e)
    {
        sliderValue = Convert.ToInt32(e.Value);
        var percentage = (int)((double)sliderValue / 100 * 100);
        await Http.PostAsync($"media/seek?percentage={percentage}", new StringContent(""));
    }
    private int currSpeed = 1;
    private readonly int MAX_FASTFORWARD_SPEED = 32;
    private readonly int MAX_REWIND_SPEED = -32;

    private int currVolume = 0;
    private readonly int MAX_VOLUME = 100;
    private readonly int MIN_VOLUME = 0;

    private async Task InputCommand(string endpoint)
    {
        await Http.PostAsync($"media/{endpoint}", new StringContent(""));
    }
    private async Task TogglePlayPause()
    {
        currSpeed = 1;
        await Http.PostAsync($"media/toggleplaypause", new StringContent(""));
    }
    private async Task Rewind()
    {
        await Http.PostAsync($"media/rewind?speed={DecSpeed()}", new StringContent(""));
    }
    private async Task FastForward()
    {
        await Http.PostAsync($"media/fastforward?speed={IncSpeed()}", new StringContent(""));
    }
    private async Task VolumeUp()
    {
        await Http.PostAsync($"media/volume?percentVolume={IncVolume()}", new StringContent(""));
    }
    private async Task VolumeDown()
    {
        await Http.PostAsync($"media/volume?percentVolume={DecVolume()}", new StringContent(""));
    }
    public int IncVolume()
    {
        if (currVolume >= MAX_VOLUME)
        {
            currVolume = MIN_VOLUME;
        }
        else 
        {
            currVolume += 10;
        }

        return currVolume;
    }
    public int DecVolume()
    {
        if (currVolume <= MIN_VOLUME)
        {
            currVolume = MIN_VOLUME;
        }
        else 
        {
            currVolume -= 10;
        }

        return currVolume ;
    }
    public int IncSpeed()
    {
        if (currSpeed <= 1)
        {
            currSpeed = 2;
        }
        else if (currSpeed != MAX_FASTFORWARD_SPEED)
        {
            currSpeed *= 2;
        }

        return currSpeed;
    }
    public int DecSpeed()
    {
        if (currSpeed >= 1)
        {
            currSpeed = -2;
        }
        else if (currSpeed != MAX_REWIND_SPEED)
        {
            currSpeed *= 2;
        }

        return currSpeed;
    }
    protected override async Task OnInitializedAsync()
    {
        var hostname = await localStorage.GetItemAsStringAsync("hostname");
        var port = await localStorage.GetItemAsync<int>("port");
        var username = await localStorage.GetItemAsStringAsync("username");
        var password = await localStorage.GetItemAsStringAsync("password");

        if(hostname != null && port != 0 && username != null && password != null)
        {
            hostname = hostname.Replace("\"", "");
            username = username.Replace("\"", "");
            password = password.Replace("\"", "");
            await Http.PostAsync($"media/kodisettings?hostname={hostname}&port={port}&username={username}&password={password}", new StringContent(""));
        }
        else
        {
            throw new Exception("No Kodi API settigns in local storage!");
        }
    }
}
